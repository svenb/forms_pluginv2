import{i,_ as _taggedTemplateLiteral,a as _decorate,s,e,x,b as e$1,c as _inherits,d as _createSuper,f as _createClass,g as _classCallCheck,h as _assertThisInitialized}from"./query-assigned-elements-79b59cb5.js";var commonjsGlobal="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function getDefaultExportFromCjs(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var lib={},scene={},debug={},containers={},settings={},util=(Object.defineProperty(settings,"__esModule",{value:!0}),settings.settings=void 0,settings.settings={debug:!1,gravity:800,zIndex:99999,respectReducedMotion:!0},{}),config$1={};function overrideDefaults(e,t){return Object.assign({},e,t)}Object.defineProperty(config$1,"__esModule",{value:!0}),config$1.overrideDefaults=void 0,config$1.overrideDefaults=overrideDefaults;var rotation={},components={},circle={},Circle=(Object.defineProperty(circle,"__esModule",{value:!0}),circle.Circle=void 0,function(){function e(e,t,r){void 0===r&&(r=0),this.x=e,this.y=t,this.radius=r}return e.zero=new e(0,0),e}()),color=(circle.Circle=Circle,{}),math={},math_1$5=(!function(r){function i(e,t,r){return(1-r)*e+r*t}Object.defineProperty(r,"__esModule",{value:!0}),r.approximately=r.clamp=r.invlerp=r.slerp=r.lerp=r.epsilon=r.rad2deg=r.deg2rad=void 0,r.deg2rad=Math.PI/180,r.rad2deg=180/Math.PI,r.epsilon=1e-6,r.lerp=i,r.slerp=function(e,t,r){return i(e,t,(1-Math.cos(r*Math.PI))/2)},r.invlerp=function(e,t,r){return(r-e)/(t-e)},r.clamp=function(e,t,r){return Math.min(r,Math.max(t,e))},r.approximately=function(e,t){return Math.abs(e-t)<r.epsilon}}(math),Object.defineProperty(color,"__esModule",{value:!0}),color.Color=void 0,math),Color=function(){function o(e,t,r){this.values=new Float32Array(3),this.rgb=[e,t,r]}return Object.defineProperty(o.prototype,"r",{get:function(){return this.values[0]},set:function(e){this.values[0]=Math.floor(e)},enumerable:!1,configurable:!0}),Object.defineProperty(o.prototype,"g",{get:function(){return this.values[1]},set:function(e){this.values[1]=Math.floor(e)},enumerable:!1,configurable:!0}),Object.defineProperty(o.prototype,"b",{get:function(){return this.values[2]},set:function(e){this.values[2]=Math.floor(e)},enumerable:!1,configurable:!0}),Object.defineProperty(o.prototype,"rgb",{get:function(){return[this.r,this.g,this.b]},set:function(e){this.r=e[0],this.g=e[1],this.b=e[2]},enumerable:!1,configurable:!0}),o.prototype.mix=function(e,t){return new o(math_1$5.lerp(this.r,e.r,t=void 0===t?.5:t),math_1$5.lerp(this.g,e.g,t),math_1$5.lerp(this.b,e.b,t))},o.prototype.toHex=function(){function e(e){return e.toString(16).padStart(2,"0")}return"#"+e(this.r)+e(this.g)+e(this.b)},o.prototype.toString=function(){return"rgb("+this.values.join(", ")+")"},o.fromHex=function(e){return e.startsWith("#")&&(e=e.substr(1)),new o(parseInt(e.substr(0,2),16),parseInt(e.substr(2,2),16),parseInt(e.substr(4,2),16))},o.fromHsl=function(e,t,r){var i,n;return e/=360,r/=100,0===(t/=100)?new o(r,r,r):new o((n=function(e){return Math.min(255,256*e)})((i=function(e,t,r){return r<0&&(r+=1),1<r&&--r,r<1/6?e+6*(t-e)*r:r<.5?t:r<2/3?e+(t-e)*(2/3-r)*6:e})(t=2*r-(r=r<.5?r*(1+t):r+t-r*t),r,e+1/3)),n(i(t,r,e)),n(i(t,r,e-1/3)))},o.white=new o(255,255,255),o.black=new o(0,0,0),o}(),gradient=(color.Color=Color,{}),spline={},math_1$4=(Object.defineProperty(spline,"__esModule",{value:!0}),spline.Spline=void 0,math),Spline=function(){function e(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(0===e.length)throw new Error("Splines require at least one key.");if(Array.isArray(e[0]))throw new Error("You are trying to pass an array to the spline constructor, which is not supported. Try to spread the array into the constructor instead.");this.keys=e}return e.prototype.evaluate=function(t){if(0===this.keys.length)throw new Error("Attempt to evaluate a spline with no keys.");var e,r,i;return 1===this.keys.length?this.keys[0].value:0===(i=(r=this.keys.sort(function(e,t){return e.time-t.time})).findIndex(function(e){return e.time>t}))?r[0].value:-1===i?r[r.length-1].value:(e=r[i-1],r=r[i],i=math_1$4.invlerp(e.time,r.time,t),this.interpolate(e.value,r.value,i))},e}(),__extends$1=(spline.Spline=Spline,commonjsGlobal&&commonjsGlobal.__extends||function(){var i=function(e,t){return(i=Object.setPrototypeOf||({__proto__:[]}instanceof Array?function(e,t){e.__proto__=t}:function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}))(e,t)};return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}()),__spreadArray$2=commonjsGlobal&&commonjsGlobal.__spreadArray||function(e,t){for(var r=0,i=t.length,n=e.length;r<i;r++,n++)e[n]=t[r];return e},spline_1$1=(Object.defineProperty(gradient,"__esModule",{value:!0}),gradient.Gradient=void 0,spline),Gradient=function(e){function i(){return null!==e&&e.apply(this,arguments)||this}return __extends$1(i,e),i.prototype.interpolate=function(e,t,r){return e.mix(t,r)},i.solid=function(e){return new i({value:e,time:.5})},i.simple=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=1/(e.length-1);return new(i.bind.apply(i,__spreadArray$2([void 0],e.map(function(e,t){return{value:e,time:t*r}}))))},i}(spline.Spline),numericSpline=(gradient.Gradient=Gradient,{}),__extends=commonjsGlobal&&commonjsGlobal.__extends||function(){var i=function(e,t){return(i=Object.setPrototypeOf||({__proto__:[]}instanceof Array?function(e,t){e.__proto__=t}:function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}))(e,t)};return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}(),math_1$3=(Object.defineProperty(numericSpline,"__esModule",{value:!0}),numericSpline.NumericSpline=void 0,math),spline_1=spline,NumericSpline=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.interpolate=function(e,t,r){return math_1$3.slerp(e,t,r)},t}(spline.Spline),rect=(numericSpline.NumericSpline=NumericSpline,{}),Rect=(Object.defineProperty(rect,"__esModule",{value:!0}),rect.Rect=void 0,function(){function t(e,t,r,i){void 0===r&&(r=0),void 0===i&&(i=0),this.x=e,this.y=t,this.width=r,this.height=i}return t.fromScreen=function(){return new t(window.scrollX,window.scrollY,window.innerWidth,window.innerHeight)},t.fromElement=function(e){e=e.getBoundingClientRect();return new t(window.scrollX+e.x,window.scrollY+e.y,e.width,e.height)},t.zero=new t(0,0),t}()),vector=(rect.Rect=Rect,{}),__spreadArray$1=commonjsGlobal&&commonjsGlobal.__spreadArray||function(e,t){for(var r=0,i=t.length,n=e.length;r<i;r++,n++)e[n]=t[r];return e},math_1$2=(Object.defineProperty(vector,"__esModule",{value:!0}),vector.Vector=void 0,math),Vector=function(){function t(e,t,r){void 0===e&&(e=0),void 0===t&&(t=0),void 0===r&&(r=0),this.values=new Float32Array(3),this.xyz=[e,t,r]}return Object.defineProperty(t.prototype,"x",{get:function(){return this.values[0]},set:function(e){this.values[0]=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.values[1]},set:function(e){this.values[1]=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"z",{get:function(){return this.values[2]},set:function(e){this.values[2]=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"xyz",{get:function(){return[this.x,this.y,this.z]},set:function(e){this.values[0]=e[0],this.values[1]=e[1],this.values[2]=e[2]},enumerable:!1,configurable:!0}),t.prototype.magnitude=function(){return Math.sqrt(this.sqrMagnitude())},t.prototype.sqrMagnitude=function(){return this.x*this.x+this.y*this.y+this.z*this.z},t.prototype.add=function(e){return new t(this.x+e.x,this.y+e.y,this.z+e.z)},t.prototype.subtract=function(e){return new t(this.x-e.x,this.y-e.y,this.z-e.z)},t.prototype.scale=function(e){return"number"==typeof e?new t(this.x*e,this.y*e,this.z*e):new t(this.x*e.x,this.y*e.y,this.z*e.z)},t.prototype.normalized=function(){var e=this.magnitude();return 0!==e?this.scale(1/e):new(t.bind.apply(t,__spreadArray$1([void 0],this.xyz)))},t.prototype.angle=function(e){return math_1$2.rad2deg*Math.acos((this.x*e.x+this.y*e.y+this.z*e.z)/(this.magnitude()*e.magnitude()))},t.prototype.cross=function(e){return new t(this.y*e.z-this.z*e.y,this.z*e.x-this.x*e.z,this.x*e.y-this.y*e.x)},t.prototype.dot=function(e){return this.magnitude()*e.magnitude()*Math.cos(math_1$2.deg2rad*this.angle(e))},t.prototype.toString=function(){return"Vector("+this.values.join(", ")+")"},t.from2dAngle=function(e){return new t(Math.cos(e*math_1$2.deg2rad),Math.sin(e*math_1$2.deg2rad))},t.zero=new t(0,0,0),t.one=new t(1,1,1),t.right=new t(1,0,0),t.up=new t(0,1,0),t.forward=new t(0,0,1),t}(),components_1$5=(vector.Vector=Vector,!function(e){var i=commonjsGlobal&&commonjsGlobal.__createBinding||(Object.create?function(e,t,r,i){void 0===i&&(i=r),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,i){e[i=void 0===i?r:i]=t[r]}),t=commonjsGlobal&&commonjsGlobal.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||i(t,e,r)};Object.defineProperty(e,"__esModule",{value:!0}),t(circle,e),t(color,e),t(gradient,e),t(numericSpline,e),t(rect,e),t(vector,e)}(components),Object.defineProperty(rotation,"__esModule",{value:!0}),rotation.rotationToNormal=void 0,components),math_1$1=math;function rotationToNormal(e){var t=e.x*math_1$1.deg2rad,e=e.y*math_1$1.deg2rad,e=new components_1$5.Vector(Math.cos(e),0,Math.sin(e)),t=new components_1$5.Vector(0,Math.cos(t),Math.sin(t));return e.cross(t)}rotation.rotationToNormal=rotationToNormal;var rules={},lazy=(Object.defineProperty(rules,"__esModule",{value:!0}),rules.despawningRules=void 0,rules.despawningRules={lifetime:function(e){return e.lifetime<=0},bounds:function(e){var t=document.documentElement.scrollHeight;return e.location.y>t}},{}),Lazy=(Object.defineProperty(lazy,"__esModule",{value:!0}),lazy.Lazy=void 0,function(){function r(e,t){void 0===t&&(t=r.defaultExists),this.factory=e,this.exists=t}return Object.defineProperty(r.prototype,"current",{get:function(){return this.exists(this.value)||(this.value=this.factory()),this.value},enumerable:!1,configurable:!0}),r.defaultExists=function(e){return void 0!==e},r}()),__spreadArray=(lazy.Lazy=Lazy,!function(e){var i=commonjsGlobal&&commonjsGlobal.__createBinding||(Object.create?function(e,t,r,i){void 0===i&&(i=r),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,i){e[i=void 0===i?r:i]=t[r]}),t=commonjsGlobal&&commonjsGlobal.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||i(t,e,r)};Object.defineProperty(e,"__esModule",{value:!0}),t(config$1,e),t(rotation,e),t(rules,e),t(lazy,e)}(util),!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.particleContainer=e.debugContainer=e.rootContainer=void 0;var t=settings,r=util;function i(e){return e&&e.isConnected}function n(e,t,r){var i=document.createElement("div");return i.id="party-js-"+e,Object.assign(i.style,t),r.appendChild(i)}e.rootContainer=new r.Lazy(function(){return n("container",{position:"fixed",left:"0",top:"0",height:"100vh",width:"100vw",pointerEvents:"none",userSelect:"none",zIndex:t.settings.zIndex.toString()},document.body)},i),e.debugContainer=new r.Lazy(function(){return n("debug",{position:"absolute",top:"0",left:"0",margin:"0.5em",padding:"0.5em 1em",border:"2px solid rgb(0, 0, 0, 0.2)",background:"rgb(0, 0, 0, 0.1)",color:"#555",fontFamily:"monospace"},e.rootContainer.current)},i),e.particleContainer=new r.Lazy(function(){return n("particles",{width:"100%",height:"100%",overflow:"hidden",perspective:"1200px"},e.rootContainer.current)},i)}(containers),commonjsGlobal&&commonjsGlobal.__spreadArray||function(e,t){for(var r=0,i=t.length,n=e.length;r<i;r++,n++)e[n]=t[r];return e}),containers_1=(Object.defineProperty(debug,"__esModule",{value:!0}),debug.Debug=void 0,containers),settings_1$1=settings,Debug=function(){function e(e){this.scene=e,this.refreshRate=8,this.refreshTimer=1/this.refreshRate}return e.prototype.tick=function(e){var t=containers_1.debugContainer.current,r=settings_1$1.settings.debug?"block":"none";t.style.display!==r&&(t.style.display=r),settings_1$1.settings.debug&&(this.refreshTimer+=e,this.refreshTimer>1/this.refreshRate)&&(this.refreshTimer=0,t.innerHTML=this.getDebugInformation(e).join("<br>"))},e.prototype.getDebugInformation=function(e){var t=this.scene.emitters.length,r=this.scene.emitters.reduce(function(e,t){return e+t.particles.length},0),e=["<b>party.js Debug</b>","--------------","FPS: "+Math.round(1/e),"Emitters: "+t,"Particles: "+r],t=this.scene.emitters.map(function(e){return["⭯: "+(e.currentLoop+1)+"/"+(0<=e.options.loops?e.options.loops:"∞"),"Σp: "+e.particles.length,e.isExpired?"<i>expired</i>":"Σt: "+e.durationTimer.toFixed(3)+"s"].join(", ")});return e.push.apply(e,__spreadArray(["--------------"],t)),e},e}(),emitter=(debug.Debug=Debug,{}),variation={},random={},components_1$4=(Object.defineProperty(random,"__esModule",{value:!0}),random.randomInsideCircle=random.randomInsideRect=random.randomUnitVector=random.pick=random.randomRange=void 0,components),math_1=math;function randomRange(e,t){return math_1.lerp(e=void 0===e?0:e,t=void 0===t?1:t,Math.random())}function pick(e){return 0===e.length?void 0:e[Math.floor(Math.random()*e.length)]}function randomUnitVector(){var e=randomRange(0,2*Math.PI),t=randomRange(-1,1);return new components_1$4.Vector(Math.sqrt(1-t*t)*Math.cos(e),Math.sqrt(1-t*t)*Math.sin(e),t)}function randomInsideRect(e){return new components_1$4.Vector(e.x+randomRange(0,e.width),e.y+randomRange(0,e.height))}function randomInsideCircle(e){var t=randomRange(0,2*Math.PI),r=randomRange(0,e.radius);return new components_1$4.Vector(e.x+Math.cos(t)*r,e.y+Math.sin(t)*r)}random.randomRange=randomRange,random.pick=pick,random.randomUnitVector=randomUnitVector,random.randomInsideRect=randomInsideRect,random.randomInsideCircle=randomInsideCircle,Object.defineProperty(variation,"__esModule",{value:!0}),variation.gradientSample=variation.splineSample=variation.skewRelative=variation.skew=variation.range=variation.evaluateVariation=void 0;var random_1$1=random;function evaluateVariation(e){return Array.isArray(e)?random_1$1.pick(e):"function"==typeof e?e():e}function range(e,t){return function(){return random_1$1.randomRange(e,t)}}function skew(e,t){return function(){return e+random_1$1.randomRange(-t,t)}}function skewRelative(e,t){return function(){return e*(1+random_1$1.randomRange(-t,t))}}function splineSample(e){return function(){return e.evaluate(Math.random())}}function gradientSample(e){return splineSample(e)}variation.evaluateVariation=evaluateVariation,variation.range=range,variation.skew=skew,variation.skewRelative=skewRelative,variation.splineSample=splineSample,variation.gradientSample=gradientSample;var options={},emitterOptions={},rules_1=(Object.defineProperty(emitterOptions,"__esModule",{value:!0}),emitterOptions.getDefaultEmitterOptions=void 0,rules);function getDefaultEmitterOptions(){return{duration:5,loops:1,useGravity:!0,maxParticles:300,despawningRules:[rules_1.despawningRules.lifetime,rules_1.despawningRules.bounds],modules:[]}}emitterOptions.getDefaultEmitterOptions=getDefaultEmitterOptions;var emissionOptions={},sources={},components_1$3=(Object.defineProperty(sources,"__esModule",{value:!0}),sources.circleSource=sources.rectSource=sources.mouseSource=sources.elementSource=sources.dynamicSource=void 0,components),random_1=random;function dynamicSource(e){if(e instanceof HTMLElement)return elementSource(e);if(e instanceof components_1$3.Circle)return circleSource(e);if(e instanceof components_1$3.Rect)return rectSource(e);if(e instanceof MouseEvent)return mouseSource(e);throw new Error("Cannot infer the source type of '"+e+"'.")}function elementSource(e){return function(){return random_1.randomInsideRect(components_1$3.Rect.fromElement(e))}}function mouseSource(e){return function(){return new components_1$3.Vector(window.scrollX+e.clientX,window.scrollY+e.clientY)}}function rectSource(e){return function(){return random_1.randomInsideRect(e)}}function circleSource(e){return function(){return random_1.randomInsideCircle(e)}}sources.dynamicSource=dynamicSource,sources.elementSource=elementSource,sources.mouseSource=mouseSource,sources.rectSource=rectSource,sources.circleSource=circleSource,Object.defineProperty(emissionOptions,"__esModule",{value:!0}),emissionOptions.getDefaultEmissionOptions=void 0;var components_1$2=components,sources_1=sources;function getDefaultEmissionOptions(){return{rate:10,angle:0,bursts:[],sourceSampler:sources_1.rectSource(components_1$2.Rect.zero),initialLifetime:5,initialSpeed:5,initialSize:1,initialRotation:components_1$2.Vector.zero,initialColor:components_1$2.Color.white}}emissionOptions.getDefaultEmissionOptions=getDefaultEmissionOptions;var renderOptions={};function getDefaultRendererOptions(){return{shapeFactory:"square",applyColor:defaultApplyColor,applyOpacity:defaultApplyOpacity,applyLighting:defaultApplyLighting,applyTransform:defaultApplyTransform}}function defaultApplyColor(e,t){var r=e.toHex();switch(t.nodeName.toLowerCase()){case"div":t.style.background=r;break;case"svg":t.style.fill=t.style.color=r;break;default:t.style.color=r}}function defaultApplyOpacity(e,t){t.style.opacity=e.toString()}function defaultApplyLighting(e,t){t.style.filter="brightness("+(.5+Math.abs(e))+")"}function defaultApplyTransform(e,t){t.style.transform="translateX("+(e.location.x-window.scrollX).toFixed(3)+"px) translateY("+(e.location.y-window.scrollY).toFixed(3)+"px) translateZ("+e.location.z.toFixed(3)+"px) rotateX("+e.rotation.x.toFixed(3)+"deg) rotateY("+e.rotation.y.toFixed(3)+"deg) rotateZ("+e.rotation.z.toFixed(3)+"deg) scale("+e.size.toFixed(3)+")"}Object.defineProperty(renderOptions,"__esModule",{value:!0}),renderOptions.getDefaultRendererOptions=void 0,renderOptions.getDefaultRendererOptions=getDefaultRendererOptions,function(e){var i=commonjsGlobal&&commonjsGlobal.__createBinding||(Object.create?function(e,t,r,i){void 0===i&&(i=r),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,i){e[i=void 0===i?r:i]=t[r]}),t=commonjsGlobal&&commonjsGlobal.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||i(t,e,r)};Object.defineProperty(e,"__esModule",{value:!0}),t(emitterOptions,e),t(emissionOptions,e),t(renderOptions,e)}(options);var hasRequiredRenderer,hasRequiredScene,particle={},components_1$1=(Object.defineProperty(particle,"__esModule",{value:!0}),particle.Particle=void 0,components),config_1$1=config$1,Particle=function(e){e=config_1$1.overrideDefaults({lifetime:0,size:1,location:components_1$1.Vector.zero,rotation:components_1$1.Vector.zero,velocity:components_1$1.Vector.zero,color:components_1$1.Color.white,opacity:1},e),this.id=Symbol(),this.size=this.initialSize=e.size,this.lifetime=this.initialLifetime=e.lifetime,this.rotation=this.initialRotation=e.rotation,this.location=e.location,this.velocity=e.velocity,this.color=e.color,this.opacity=e.opacity},vector_1=(particle.Particle=Particle,Object.defineProperty(emitter,"__esModule",{value:!0}),emitter.Emitter=void 0,vector),settings_1=settings,variation_1=variation,config_1=config$1,options_1=options,particle_1=particle,Emitter=function(){function e(e){this.particles=[],this.currentLoop=0,this.durationTimer=0,this.emissionTimer=0,this.attemptedBurstIndices=[],this.options=config_1.overrideDefaults(options_1.getDefaultEmitterOptions(),null==e?void 0:e.emitterOptions),this.emission=config_1.overrideDefaults(options_1.getDefaultEmissionOptions(),null==e?void 0:e.emissionOptions),this.renderer=config_1.overrideDefaults(options_1.getDefaultRendererOptions(),null==e?void 0:e.rendererOptions)}return Object.defineProperty(e.prototype,"isExpired",{get:function(){return 0<=this.options.loops&&this.currentLoop>=this.options.loops},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"canRemove",{get:function(){return 0===this.particles.length},enumerable:!1,configurable:!0}),e.prototype.clearParticles=function(){return this.particles.splice(0).length},e.prototype.tick=function(r){if(!this.isExpired&&(this.durationTimer+=r,this.durationTimer>=this.options.duration&&(this.currentLoop++,this.durationTimer=0,this.attemptedBurstIndices=[]),!this.isExpired)){for(var e=0,t=0,i=this.emission.bursts;t<i.length;t++){var n=i[t];if(n.time<=this.durationTimer&&!this.attemptedBurstIndices.includes(e)){for(var o=variation_1.evaluateVariation(n.count),a=0;a<o;a++)this.emitParticle();this.attemptedBurstIndices.push(e)}e++}this.emissionTimer+=r;for(var s=1/this.emission.rate;this.emissionTimer>s;)this.emissionTimer-=s,this.emitParticle()}for(var l=this,a=this.particles.length-1;0<=a;a--)!function(e){var t=l.particles[e];l.tickParticle(t,r),l.options.despawningRules.some(function(e){return e(t)})&&l.particles.splice(e,1)}(a)},e.prototype.tickParticle=function(e,t){e.lifetime-=t,this.options.useGravity&&(e.velocity=e.velocity.add(vector_1.Vector.up.scale(settings_1.settings.gravity*t))),e.location=e.location.add(e.velocity.scale(t));for(var r=0,i=this.options.modules;r<i.length;r++)(0,i[r])(e)},e.prototype.emitParticle=function(){var e=new particle_1.Particle({location:this.emission.sourceSampler(),lifetime:variation_1.evaluateVariation(this.emission.initialLifetime),velocity:vector_1.Vector.from2dAngle(variation_1.evaluateVariation(this.emission.angle)).scale(variation_1.evaluateVariation(this.emission.initialSpeed)),size:variation_1.evaluateVariation(this.emission.initialSize),rotation:variation_1.evaluateVariation(this.emission.initialRotation),color:variation_1.evaluateVariation(this.emission.initialColor)});return this.particles.push(e),this.particles.length>this.options.maxParticles&&this.particles.shift(),e},e}(),renderer=(emitter.Emitter=Emitter,{}),shapes={};function requireRenderer(){var e,t,r,i,n;return hasRequiredRenderer||(hasRequiredRenderer=1,Object.defineProperty(renderer,"__esModule",{value:!0}),renderer.Renderer=void 0,e=requireLib(),t=vector,r=containers,i=shapes,n=util,o.prototype.begin=function(){this.renderedParticles=[]},o.prototype.end=function(){for(var e=this.elements.keys(),t=e.next();!t.done;){var r=t.value;this.renderedParticles.includes(r)||(this.elements.get(r).remove(),this.elements.delete(r)),t=e.next()}return this.renderedParticles.length},o.prototype.renderParticle=function(e,t){var r,i;this.enabled&&(t=t.renderer,r=this.elements.has(e.id)?this.elements.get(e.id):this.createParticleElement(e,t),t.applyColor&&t.applyColor(e.color,r),t.applyOpacity&&t.applyOpacity(e.opacity,r),t.applyLighting&&(i=n.rotationToNormal(e.rotation).dot(this.light),t.applyLighting(i,r)),t.applyTransform&&t.applyTransform(e,r),this.renderedParticles.push(e.id))},o.prototype.createParticleElement=function(e,t){t=i.resolveShapeFactory(t.shapeFactory).cloneNode(!0);return t.style.position="absolute",this.elements.set(e.id,r.particleContainer.current.appendChild(t)),t},renderer.Renderer=o),renderer;function o(){this.elements=new Map,this.light=new t.Vector(0,0,1),this.enabled=!0,this.enabled=!e.settings.respectReducedMotion||!window.matchMedia("(prefers-reduced-motion)").matches}}function requireScene(){var e,t,r;return hasRequiredScene||(hasRequiredScene=1,Object.defineProperty(scene,"__esModule",{value:!0}),scene.Scene=void 0,e=debug,t=emitter,r=requireRenderer(),i.prototype.createEmitter=function(e){e=new t.Emitter(e);return this.emitters.push(e),e},i.prototype.clearEmitters=function(){return this.emitters.splice(0).length},i.prototype.clearParticles=function(){return this.emitters.reduce(function(e,t){return e+t.clearParticles()},0)},i.prototype.scheduleTick=function(){this.scheduledTickId=window.requestAnimationFrame(this.tick)},i.prototype.cancelTick=function(){window.cancelAnimationFrame(this.scheduledTickId)},i.prototype.tick=function(e){var t=(e-this.lastTickTimestamp)/1e3;try{for(var r=0;r<this.emitters.length;r++)(o=this.emitters[r]).tick(t),o.isExpired&&o.canRemove&&this.emitters.splice(r--,1)}catch(e){console.error("An error occurred while updating the scene's emitters:\n\""+e+'"')}try{this.renderer.begin();for(var i=0,n=this.emitters;i<n.length;i++)for(var o=n[i],a=0,s=o.particles;a<s.length;a++){var l=s[a];this.renderer.renderParticle(l,o)}this.renderer.end()}catch(e){console.error("An error occurred while rendering the scene's particles:\n\""+e+'"')}this.debug.tick(t),this.lastTickTimestamp=e,this.scheduleTick()},scene.Scene=i),scene;function i(){this.emitters=[],this.debug=new e.Debug(this),this.renderer=new r.Renderer,this.scheduledTickId=void 0,this.lastTickTimestamp=performance.now(),this.tick=this.tick.bind(this),this.scheduleTick()}}!function(i){Object.defineProperty(i,"__esModule",{value:!0}),i.resolveShapeFactory=i.resolvableShapes=void 0;var n=variation;i.resolvableShapes={square:'<div style="height: 10px; width: 10px;"></div>',rectangle:'<div style="height: 6px; width: 10px;"></div>',circle:'<svg viewBox="0 0 2 2" width="10" height="10"><circle cx="1" cy="1" r="1" fill="currentColor"/></svg>',roundedSquare:'<div style="height: 10px; width: 10px; border-radius: 3px;"></div>',roundedRectangle:'<div style="height: 6px; width: 10px; border-radius: 3px;"></div>',star:'<svg viewBox="0 0 512 512" width="15" height="15"><polygon fill="currentColor" points="512,197.816 325.961,185.585 255.898,9.569 185.835,185.585 0,197.816 142.534,318.842 95.762,502.431 255.898,401.21 416.035,502.431 369.263,318.842"/></svg>'},i.resolveShapeFactory=function(e){if("string"!=typeof(e=n.evaluateVariation(e)))return e;var t,r=i.resolvableShapes[e];if(r)return(t=document.createElement("div")).innerHTML=r,t.firstElementChild;throw new Error("Failed to resolve shape key '"+e+"'. Did you forget to add it to the 'resolvableShapes' lookup?")}}(shapes);var hasRequiredConfetti,templates={},confetti={},modules={},components_1=(Object.defineProperty(modules,"__esModule",{value:!0}),modules.ModuleBuilder=void 0,components),ModuleBuilder=function(){function e(){this.factor="lifetime",this.isRelative=!1}return e.prototype.drive=function(e){return this.driverKey=e,this},e.prototype.through=function(e){return this.factor=e,this},e.prototype.by=function(e){return this.driverValue=e,this},e.prototype.relative=function(e){return this.isRelative=e=void 0===e?!0:e,this},e.prototype.build=function(){var t=this;if(void 0===this.driverKey)throw new Error("No driving key was provided in the module builder. Did you forget a '.drive()' call?");if(void 0===this.driverValue)throw new Error("No driving value was provided in the module builder. Did you forget a '.through()' call?");return function(e){updateDrivenProperty(e,t.driverKey,evaluateModuleDriver(t.driverValue,calculateModuleFactor(t.factor,e),e),t.isRelative)}},e}();function evaluateModuleDriver(e,t,r){return"object"==typeof e&&"evaluate"in e?e.evaluate(t):"function"==typeof e?e(t,r):e}function calculateModuleFactor(e,t){switch(e){case"lifetime":return t.initialLifetime-t.lifetime;case"relativeLifetime":return(t.initialLifetime-t.lifetime)/t.initialLifetime;case"size":return t.size;default:throw new Error("Invalid driving factor '"+e+"'.")}}function updateDrivenProperty(e,t,r,i){if(i=void 0===i?!1:i){i=e["initial"+t[0].toUpperCase()+t.substr(1)];if(void 0===i)throw new Error("Unable to use relative chaining with key '"+t+"'; no initial value exists.");if(r instanceof components_1.Vector)updateDrivenProperty(e,t,i.add(r));else{if("number"!=typeof r)throw new Error("Unable to use relative chaining with particle key '"+t+"'; no relative operation for '"+r+"' could be inferred.");updateDrivenProperty(e,t,i*r)}}else e[t]=r}function requireConfetti(){var r,i,n,o,a,s,l;return hasRequiredConfetti||(hasRequiredConfetti=1,Object.defineProperty(confetti,"__esModule",{value:!0}),confetti.confetti=void 0,r=requireLib(),i=components,n=modules,o=random,a=sources,s=variation,l=util,confetti.confetti=function(e,t){return t=l.overrideDefaults({count:s.range(20,40),spread:s.range(35,45),speed:s.range(300,600),size:s.skew(1,.2),rotation:function(){return o.randomUnitVector().scale(180)},color:function(){return i.Color.fromHsl(o.randomRange(0,360),100,70)},modules:[(new n.ModuleBuilder).drive("size").by(function(e){return Math.min(1,3*e)}).relative().build(),(new n.ModuleBuilder).drive("rotation").by(function(e){return new i.Vector(140,200,260).scale(e)}).relative().build()],shapes:["square","circle"]},t),r.scene.current.createEmitter({emitterOptions:{loops:1,duration:8,modules:t.modules},emissionOptions:{rate:0,bursts:[{time:0,count:t.count}],sourceSampler:a.dynamicSource(e),angle:s.skew(-90,s.evaluateVariation(t.spread)),initialLifetime:8,initialSpeed:t.speed,initialSize:t.size,initialRotation:t.rotation,initialColor:t.color},rendererOptions:{shapeFactory:t.shapes}})}),confetti}modules.ModuleBuilder=ModuleBuilder;var hasRequiredSparkles,hasRequiredTemplates,hasRequiredLib,sparkles={};function requireSparkles(){var r,i,n,o,a,s,l;return hasRequiredSparkles||(hasRequiredSparkles=1,Object.defineProperty(sparkles,"__esModule",{value:!0}),sparkles.sparkles=void 0,r=requireLib(),i=components,n=modules,o=random,a=sources,s=variation,l=util,sparkles.sparkles=function(e,t){return t=l.overrideDefaults({lifetime:s.range(1,2),count:s.range(10,20),speed:s.range(100,200),size:s.range(.8,1.8),rotation:function(){return new i.Vector(0,0,o.randomRange(0,360))},color:function(){return i.Color.fromHsl(50,100,o.randomRange(55,85))},modules:[(new n.ModuleBuilder).drive("rotation").by(function(e){return new i.Vector(0,0,200).scale(e)}).relative().build(),(new n.ModuleBuilder).drive("size").by(new i.NumericSpline({time:0,value:0},{time:.3,value:1},{time:.7,value:1},{time:1,value:0})).through("relativeLifetime").relative().build(),(new n.ModuleBuilder).drive("opacity").by(new i.NumericSpline({time:0,value:1},{time:.5,value:1},{time:1,value:0})).through("relativeLifetime").build()],shapes:"star"},t),r.scene.current.createEmitter({emitterOptions:{loops:1,duration:3,useGravity:!1,modules:t.modules},emissionOptions:{rate:0,bursts:[{time:0,count:t.count}],sourceSampler:a.dynamicSource(e),angle:s.range(0,360),initialLifetime:t.lifetime,initialSpeed:t.speed,initialSize:t.size,initialRotation:t.rotation,initialColor:t.color},rendererOptions:{applyLighting:void 0,shapeFactory:t.shapes}})}),sparkles}function requireTemplates(){var e,i,t;return hasRequiredTemplates||(hasRequiredTemplates=1,e=templates,i=commonjsGlobal&&commonjsGlobal.__createBinding||(Object.create?function(e,t,r,i){void 0===i&&(i=r),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,i){e[i=void 0===i?r:i]=t[r]}),t=commonjsGlobal&&commonjsGlobal.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||i(t,e,r)},Object.defineProperty(e,"__esModule",{value:!0}),t(requireConfetti(),e),t(requireSparkles(),e)),templates}function requireLib(){var e,i,t,r,n,o,a,s;return hasRequiredLib||(hasRequiredLib=1,e=lib,i=commonjsGlobal&&commonjsGlobal.__createBinding||(Object.create?function(e,t,r,i){void 0===i&&(i=r),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,i){e[i=void 0===i?r:i]=t[r]}),t=commonjsGlobal&&commonjsGlobal.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||i(t,e,r)},Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.forceInit=e.util=e.math=e.random=e.sources=e.variation=e.Emitter=e.Particle=e.settings=e.scene=void 0,r=requireScene(),n=util,t(components,e),t(requireTemplates(),e),t(shapes,e),t(modules,e),e.scene=new n.Lazy(function(){if("undefined"==typeof document||"undefined"==typeof window)throw new Error("It seems like you are trying to run party.js in a non-browser-like environment, which is not supported.");return new r.Scene}),o=settings,Object.defineProperty(e,"settings",{enumerable:!0,get:function(){return o.settings}}),a=particle,Object.defineProperty(e,"Particle",{enumerable:!0,get:function(){return a.Particle}}),s=emitter,Object.defineProperty(e,"Emitter",{enumerable:!0,get:function(){return s.Emitter}}),e.variation=variation,e.sources=sources,e.random=random,e.math=math,e.util=util,e.forceInit=function(){e.scene.current},e.default=requireLib()),lib}var _templateObject$1,_templateObject,libExports=requireLib(),party=getDefaultExportFromCjs(libExports),config={controlName:"Confetti Plugin v2",groupName:"Starter Kit",fallbackDisableSubmit:!1,description:"Enjoy the Confetti on the Form to celebrate",version:"1.0",properties:{startPartyTrigger:{type:"boolean",title:"Enable the Effect"},typeofEffect:{type:"string",enum:["Confetti","Sparkle"],title:"Select the Effect\t"}},events:["ntx-value-change"],standardProperties:{fieldLabel:!0,defaultValue:!0}},styles=i(_templateObject$1=_templateObject$1||_taggedTemplateLiteral(["\n\t:host {\n\t\tdisplay: block;\n\t\ttext-align: center;\n\t}\n"])),Confetti=_decorate([e$1("confetti-form")],function(i,n){return{F:function(){_inherits(r,n);var t=_createSuper(r);function r(){var e;return _classCallCheck(this,r),e=t.call(this),i(_assertThisInitialized(e)),e.sampleProperty="",e}return _createClass(r)}(),d:[{kind:"field",static:!0,key:"getMetaConfig",value:function(){return function(){return config}}},{kind:"field",static:!0,key:"styles",value:function(){return styles}},{kind:"field",decorators:[e({type:String})],key:"sampleProperty",value:void 0},{kind:"field",decorators:[e({type:Boolean})],key:"startPartyTrigger",value:void 0},{kind:"field",decorators:[e({type:String})],key:"typeofEffect",value:void 0},{kind:"method",key:"render",value:function(){return!0===this.startPartyTrigger&&this.startParty(),x(_templateObject=_templateObject||_taggedTemplateLiteral([' <div id="party-container"></div> ']))}},{kind:"method",key:"startParty",value:function(){var e=null==(e=this.shadowRoot)?void 0:e.getElementById("party-container");e&&("Sparkle"===this.typeofEffect?party.sparkles(e,{count:50,speed:party.variation.range(50,300)}):party.confetti(e,{count:party.variation.range(20,60)}))}}]}},s);export{Confetti};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
